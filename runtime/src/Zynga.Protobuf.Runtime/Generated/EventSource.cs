// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_source.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using Google.Protobuf;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Zynga.Protobuf.Runtime.EventSource {

  /// <summary>Holder for reflection information generated from event_source.proto</summary>
  public static partial class EventSourceReflection {

    #region Descriptor
    /// <summary>File descriptor for event_source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventSourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJldmVudF9zb3VyY2UucHJvdG8SGmNvbS56eW5nYS5ydW50aW1lLnByb3Rv",
            "YnVmIpsCCgxFdmVudENvbnRlbnQSEgoDdTMyGAEgASgNSABSA3UzMhISCgNp",
            "MzIYAiABKAVIAFIDaTMyEhIKA2Y2NBgDIAEoBkgAUgNmNjQSEgoDZjMyGAQg",
            "ASgHSABSA2YzMhIUCgRzZjY0GAUgASgQSABSBHNmNjQSFAoEc2YzMhgGIAEo",
            "D0gAUgRzZjMyEhIKA3I2NBgHIAEoAUgAUgNyNjQSEgoDcjMyGAggASgCSABS",
            "A3IzMhIdCglib29sX2RhdGEYCSABKAhIAFIIYm9vbERhdGESIQoLc3RyaW5n",
            "X2RhdGEYCiABKAlIAFIKc3RyaW5nRGF0YRIdCglieXRlX2RhdGEYCyABKAxI",
            "AFIIYnl0ZURhdGFCBgoEZGF0YSKgAQoJRXZlbnREYXRhEhQKBWZpZWxkGAEg",
            "ASgFUgVmaWVsZBI/CgZhY3Rpb24YAiABKA4yJy5jb20uenluZ2EucnVudGlt",
            "ZS5wcm90b2J1Zi5FdmVudEFjdGlvblIGYWN0aW9uEjwKBGRhdGEYAyABKAsy",
            "KC5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5FdmVudENvbnRlbnRSBGRh",
            "dGEiUAoPRXZlbnRTb3VyY2VSb290Ej0KBmV2ZW50cxgBIAMoCzIlLmNvbS56",
            "eW5nYS5ydW50aW1lLnByb3RvYnVmLkV2ZW50RGF0YVIGZXZlbnRzKocBCgtF",
            "dmVudEFjdGlvbhIHCgNTRVQQABIMCghBRERfTElTVBABEg8KC1JFTU9WRV9M",
            "SVNUEAISCwoHQUREX01BUBADEg4KClJFTU9WRV9NQVAQBBIJCgVDTEVBUhAF",
            "EgwKCFNOQVBTSE9UEAYSCwoHTUFQX0tFWRAHEg0KCU1BUF9WQUxVRRAIQkYK",
            "EmNvbS56eW5nYS5wcm90b2J1ZkILRXZlbnRTb3VyY2WqAiJaeW5nYS5Qcm90",
            "b2J1Zi5SdW50aW1lLkV2ZW50U291cmNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Zynga.Protobuf.Runtime.EventSource.EventAction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.EventContent), global::Zynga.Protobuf.Runtime.EventSource.EventContent.Parser, new[]{ "U32", "I32", "F64", "F32", "Sf64", "Sf32", "R64", "R32", "BoolData", "StringData", "ByteData" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.EventData), global::Zynga.Protobuf.Runtime.EventSource.EventData.Parser, new[]{ "Field", "Action", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.EventSourceRoot), global::Zynga.Protobuf.Runtime.EventSource.EventSourceRoot.Parser, new[]{ "Events" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EventAction {
    [pbr::OriginalName("SET")] Set = 0,
    [pbr::OriginalName("ADD_LIST")] AddList = 1,
    [pbr::OriginalName("REMOVE_LIST")] RemoveList = 2,
    [pbr::OriginalName("ADD_MAP")] AddMap = 3,
    [pbr::OriginalName("REMOVE_MAP")] RemoveMap = 4,
    [pbr::OriginalName("CLEAR")] Clear = 5,
    [pbr::OriginalName("SNAPSHOT")] Snapshot = 6,
    [pbr::OriginalName("MAP_KEY")] MapKey = 7,
    [pbr::OriginalName("MAP_VALUE")] MapValue = 8,
  }

  #endregion

  #region Messages
  public sealed partial class EventContent : pb::IMessage<EventContent> {
    private static readonly pb::MessageParser<EventContent> _parser = new pb::MessageParser<EventContent>(() => new EventContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventContent(EventContent other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.U32:
          U32 = other.U32;
          break;
        case DataOneofCase.I32:
          I32 = other.I32;
          break;
        case DataOneofCase.F64:
          F64 = other.F64;
          break;
        case DataOneofCase.F32:
          F32 = other.F32;
          break;
        case DataOneofCase.Sf64:
          Sf64 = other.Sf64;
          break;
        case DataOneofCase.Sf32:
          Sf32 = other.Sf32;
          break;
        case DataOneofCase.R64:
          R64 = other.R64;
          break;
        case DataOneofCase.R32:
          R32 = other.R32;
          break;
        case DataOneofCase.BoolData:
          BoolData = other.BoolData;
          break;
        case DataOneofCase.StringData:
          StringData = other.StringData;
          break;
        case DataOneofCase.ByteData:
          ByteData = other.ByteData;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventContent Clone() {
      return new EventContent(this);
    }

    /// <summary>Field number for the "u32" field.</summary>
    public const int U32FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U32 {
      get { return dataCase_ == DataOneofCase.U32 ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.U32;
      }
    }

    /// <summary>Field number for the "i32" field.</summary>
    public const int I32FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I32 {
      get { return dataCase_ == DataOneofCase.I32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.I32;
      }
    }

    /// <summary>Field number for the "f64" field.</summary>
    public const int F64FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong F64 {
      get { return dataCase_ == DataOneofCase.F64 ? (ulong) data_ : 0UL; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.F64;
      }
    }

    /// <summary>Field number for the "f32" field.</summary>
    public const int F32FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint F32 {
      get { return dataCase_ == DataOneofCase.F32 ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.F32;
      }
    }

    /// <summary>Field number for the "sf64" field.</summary>
    public const int Sf64FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sf64 {
      get { return dataCase_ == DataOneofCase.Sf64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Sf64;
      }
    }

    /// <summary>Field number for the "sf32" field.</summary>
    public const int Sf32FieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sf32 {
      get { return dataCase_ == DataOneofCase.Sf32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.Sf32;
      }
    }

    /// <summary>Field number for the "r64" field.</summary>
    public const int R64FieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double R64 {
      get { return dataCase_ == DataOneofCase.R64 ? (double) data_ : 0D; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.R64;
      }
    }

    /// <summary>Field number for the "r32" field.</summary>
    public const int R32FieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R32 {
      get { return dataCase_ == DataOneofCase.R32 ? (float) data_ : 0F; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.R32;
      }
    }

    /// <summary>Field number for the "bool_data" field.</summary>
    public const int BoolDataFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolData {
      get { return dataCase_ == DataOneofCase.BoolData ? (bool) data_ : false; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.BoolData;
      }
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringData {
      get { return dataCase_ == DataOneofCase.StringData ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.StringData;
      }
    }

    /// <summary>Field number for the "byte_data" field.</summary>
    public const int ByteDataFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ByteData {
      get { return dataCase_ == DataOneofCase.ByteData ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.ByteData;
      }
    }

    public object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      U32 = 1,
      I32 = 2,
      F64 = 3,
      F32 = 4,
      Sf64 = 5,
      Sf32 = 6,
      R64 = 7,
      R32 = 8,
      BoolData = 9,
      StringData = 10,
      ByteData = 11,
    }
    public DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (U32 != other.U32) return false;
      if (I32 != other.I32) return false;
      if (F64 != other.F64) return false;
      if (F32 != other.F32) return false;
      if (Sf64 != other.Sf64) return false;
      if (Sf32 != other.Sf32) return false;
      if (R64 != other.R64) return false;
      if (R32 != other.R32) return false;
      if (BoolData != other.BoolData) return false;
      if (StringData != other.StringData) return false;
      if (ByteData != other.ByteData) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.U32) hash ^= U32.GetHashCode();
      if (dataCase_ == DataOneofCase.I32) hash ^= I32.GetHashCode();
      if (dataCase_ == DataOneofCase.F64) hash ^= F64.GetHashCode();
      if (dataCase_ == DataOneofCase.F32) hash ^= F32.GetHashCode();
      if (dataCase_ == DataOneofCase.Sf64) hash ^= Sf64.GetHashCode();
      if (dataCase_ == DataOneofCase.Sf32) hash ^= Sf32.GetHashCode();
      if (dataCase_ == DataOneofCase.R64) hash ^= R64.GetHashCode();
      if (dataCase_ == DataOneofCase.R32) hash ^= R32.GetHashCode();
      if (dataCase_ == DataOneofCase.BoolData) hash ^= BoolData.GetHashCode();
      if (dataCase_ == DataOneofCase.StringData) hash ^= StringData.GetHashCode();
      if (dataCase_ == DataOneofCase.ByteData) hash ^= ByteData.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.U32) {
        output.WriteRawTag(8);
        output.WriteUInt32(U32);
      }
      if (dataCase_ == DataOneofCase.I32) {
        output.WriteRawTag(16);
        output.WriteInt32(I32);
      }
      if (dataCase_ == DataOneofCase.F64) {
        output.WriteRawTag(25);
        output.WriteFixed64(F64);
      }
      if (dataCase_ == DataOneofCase.F32) {
        output.WriteRawTag(37);
        output.WriteFixed32(F32);
      }
      if (dataCase_ == DataOneofCase.Sf64) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Sf64);
      }
      if (dataCase_ == DataOneofCase.Sf32) {
        output.WriteRawTag(53);
        output.WriteSFixed32(Sf32);
      }
      if (dataCase_ == DataOneofCase.R64) {
        output.WriteRawTag(57);
        output.WriteDouble(R64);
      }
      if (dataCase_ == DataOneofCase.R32) {
        output.WriteRawTag(69);
        output.WriteFloat(R32);
      }
      if (dataCase_ == DataOneofCase.BoolData) {
        output.WriteRawTag(72);
        output.WriteBool(BoolData);
      }
      if (dataCase_ == DataOneofCase.StringData) {
        output.WriteRawTag(82);
        output.WriteString(StringData);
      }
      if (dataCase_ == DataOneofCase.ByteData) {
        output.WriteRawTag(90);
        output.WriteBytes(ByteData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.U32) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U32);
      }
      if (dataCase_ == DataOneofCase.I32) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I32);
      }
      if (dataCase_ == DataOneofCase.F64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.F32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.Sf64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.Sf32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.R64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.R32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.BoolData) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.StringData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
      }
      if (dataCase_ == DataOneofCase.ByteData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ByteData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventContent other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.U32:
          U32 = other.U32;
          break;
        case DataOneofCase.I32:
          I32 = other.I32;
          break;
        case DataOneofCase.F64:
          F64 = other.F64;
          break;
        case DataOneofCase.F32:
          F32 = other.F32;
          break;
        case DataOneofCase.Sf64:
          Sf64 = other.Sf64;
          break;
        case DataOneofCase.Sf32:
          Sf32 = other.Sf32;
          break;
        case DataOneofCase.R64:
          R64 = other.R64;
          break;
        case DataOneofCase.R32:
          R32 = other.R32;
          break;
        case DataOneofCase.BoolData:
          BoolData = other.BoolData;
          break;
        case DataOneofCase.StringData:
          StringData = other.StringData;
          break;
        case DataOneofCase.ByteData:
          ByteData = other.ByteData;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            U32 = input.ReadUInt32();
            break;
          }
          case 16: {
            I32 = input.ReadInt32();
            break;
          }
          case 25: {
            F64 = input.ReadFixed64();
            break;
          }
          case 37: {
            F32 = input.ReadFixed32();
            break;
          }
          case 41: {
            Sf64 = input.ReadSFixed64();
            break;
          }
          case 53: {
            Sf32 = input.ReadSFixed32();
            break;
          }
          case 57: {
            R64 = input.ReadDouble();
            break;
          }
          case 69: {
            R32 = input.ReadFloat();
            break;
          }
          case 72: {
            BoolData = input.ReadBool();
            break;
          }
          case 82: {
            StringData = input.ReadString();
            break;
          }
          case 90: {
            ByteData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventData : pb::IMessage<EventData> {
    private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData(EventData other) : this() {
      field_ = other.field_;
      action_ = other.action_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData Clone() {
      return new EventData(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    private int field_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Field {
      get { return field_; }
      set {
        field_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private global::Zynga.Protobuf.Runtime.EventSource.EventAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.EventAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Zynga.Protobuf.Runtime.EventSource.EventContent data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.EventContent Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field != other.Field) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Field != 0) hash ^= Field.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Field != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Field);
      }
      if (Action != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Field != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Field);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventData other) {
      if (other == null) {
        return;
      }
      if (other.Field != 0) {
        Field = other.Field;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Zynga.Protobuf.Runtime.EventSource.EventContent();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Field = input.ReadInt32();
            break;
          }
          case 16: {
            action_ = (global::Zynga.Protobuf.Runtime.EventSource.EventAction) input.ReadEnum();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Zynga.Protobuf.Runtime.EventSource.EventContent();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventSourceRoot : pb::IMessage<EventSourceRoot> {
    private static readonly pb::MessageParser<EventSourceRoot> _parser = new pb::MessageParser<EventSourceRoot>(() => new EventSourceRoot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSourceRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceRoot(EventSourceRoot other) : this() {
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceRoot Clone() {
      return new EventSourceRoot(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Zynga.Protobuf.Runtime.EventSource.EventData> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Zynga.Protobuf.Runtime.EventSource.EventData.Parser);
    private readonly pbc::RepeatedField<global::Zynga.Protobuf.Runtime.EventSource.EventData> events_ = new pbc::RepeatedField<global::Zynga.Protobuf.Runtime.EventSource.EventData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Zynga.Protobuf.Runtime.EventSource.EventData> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSourceRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSourceRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSourceRoot other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
