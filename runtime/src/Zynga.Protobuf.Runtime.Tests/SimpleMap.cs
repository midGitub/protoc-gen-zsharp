// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/simple_map.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf {

  /// <summary>Holder for reflection information generated from test/simple_map.proto</summary>
  public static partial class SimpleMapReflection {

    #region Descriptor
    /// <summary>File descriptor for test/simple_map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimpleMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChV0ZXN0L3NpbXBsZV9tYXAucHJvdG8SGmNvbS56eW5nYS5ydW50aW1lLnBy",
            "b3RvYnVmGhJldmVudF9wbHVnaW4ucHJvdG8inAEKCVNpbXBsZU1hcBJNCgh0",
            "ZXN0X2ZvbxgKIAMoCzIyLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLlNp",
            "bXBsZU1hcC5UZXN0Rm9vRW50cnlSB3Rlc3RGb28aOgoMVGVzdEZvb0VudHJ5",
            "EhAKA2tleRgBIAEoBVIDa2V5EhQKBXZhbHVlGAIgASgJUgV2YWx1ZToCOAE6",
            "BMi4HgFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleMap), global::Com.Zynga.Runtime.Protobuf.SimpleMap.Parser, new[]{ "TestFoo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SimpleMap : zpr::EventRegistry, pb::IMessage<SimpleMap> {
    private static readonly pb::MessageParser<SimpleMap> _parser = new pb::MessageParser<SimpleMap>(() => new SimpleMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMap() {
      OnConstruction();
      testFoo_.SetRoot(_root);
      testFoo_.SetPath(Path.TestFooPath);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMap(SimpleMap other) : this() {
      testFoo_ = new EventMapField<int, string>(testFooMapConverter, other.testFoo_.Clone());
      testFoo_.SetRoot(_root);
      testFoo_.SetPath(Path.TestFooPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMap Clone() {
      return new SimpleMap(this);
    }

    public static bool IsEventSourced = true;

    public SimpleMap.Paths Path = new SimpleMap.Paths(zpr.EventPath.Empty);

    public override void SetRoot(List<zpr.EventSource.EventData> inRoot) {
      base.SetRoot(inRoot);
      testFoo_.SetRoot(inRoot);
    }
    public void SetPath(SimpleMap.Paths path) {
      this.Path = path;
      testFoo_.SetPath(Path.TestFooPath);
    }

    public class Paths {

        public zpr.EventPath Path = null;

        public Paths(zpr.EventPath _path) {
          Path = _path;
        }
        public zpr.EventPath TestFooPath => new zpr.EventPath(Path, 10);
    }
    /// <summary>Field number for the "test_foo" field.</summary>
    public const int TestFooFieldNumber = 10;
    private static readonly pbc::MapField<int, string>.Codec _map_testFoo_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 82);
    internal class TestFooMapConverter : EventMapConverter<int, string> {
      public override zpr.EventSource.EventContent GetEventData(int key, string value, bool skipValue = false) {
        var mapEvent = new zpr.EventSource.EventMap();
        using (var memStream = new MemoryStream()) {
          var dataStream = new CodedOutputStream(memStream);
          dataStream.WriteInt32(key);
          if(!skipValue) dataStream.WriteString(value);
          dataStream.Flush();
          mapEvent.Data = ByteString.CopyFrom(memStream.ToArray());
        }
        return new zpr.EventSource.EventContent{MapData = mapEvent};
      }
      public override KeyValuePair<int, string> GetItem(zpr.EventSource.EventData data) {
        var dataStream = data.Data.MapData.Data.CreateCodedInput();
        var realKeytestFoo = dataStream.ReadInt32();
        if (data.Action == zpr.EventSource.EventAction.RemoveMap) {
          return new KeyValuePair<int, string>(realKeytestFoo, default(string));
        }
        else {
          var realValuetestFoo  = dataStream.ReadString();
          return new KeyValuePair<int, string>(realKeytestFoo, realValuetestFoo);
        }
      }
    }
    private static readonly EventMapConverter<int, string> testFooMapConverter = new TestFooMapConverter();
    private readonly EventMapField<int, string> testFoo_ = new EventMapField<int, string>(testFooMapConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMapField<int, string> TestFoo {
      get { return testFoo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!testFoo_.Equals(other.testFoo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testFoo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testFoo_.WriteTo(output, _map_testFoo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testFoo_.CalculateSize(_map_testFoo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleMap other) {
      if (other == null) {
        return;
      }
      testFoo_.Add(other.testFoo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            testFoo_.AddEntriesFrom(input, _map_testFoo_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        switch (e.Path[pathIndex]) {
          case 10: {
            testFoo_.ApplyEvent(e);
          }
          break;
          default: 
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventContent GetEventData<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
        switch (fieldNumber) {
          case 10: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.MapData };
          }
          break;
          default: 
            return null;
          break;
        }
    }

    public override void AddEvent<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
       var e = new zpr.EventSource.EventData {
         Field = fieldNumber,
         Action = action,
         Data = GetEventData(fieldNumber, action, data)
       };

       switch (fieldNumber) {
          case 10: {
            e.Path.AddRange(this.Path.TestFooPath._path);
          }
          break;
          default: 
            return;
          break;
        }
        _root.Add(e);
    }
    public override bool ApplySnapshot(zpr.EventSource.EventSourceRoot root) {
      var e = SimpleMap.Parser.ParseFrom(root.Events[0].Data.ByteData);
      MergeFrom(e);
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      var er = new zpr.EventSource.EventSourceRoot();
      var ee = new zpr.EventSource.EventData();
      ee.Action = zpr.EventSource.EventAction.Snapshot;
      ee.Data = new zpr.EventSource.EventContent();
      ee.Data.ByteData = this.ToByteString();
      er.Events.Add(ee);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
