// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_test.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf {

  /// <summary>Holder for reflection information generated from event_test.proto</summary>
  public static partial class EventTestReflection {

    #region Descriptor
    /// <summary>File descriptor for event_test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBldmVudF90ZXN0LnByb3RvEhpjb20uenluZ2EucnVudGltZS5wcm90b2J1",
            "ZhoSZXZlbnRfcGx1Z2luLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0",
            "YW1wLnByb3RvIiEKC1Rlc3RNZXNzYWdlEhIKBGRhdGEYASABKAVSBGRhdGEi",
            "KgoOVGVzdFR3b01lc3NhZ2USEgoEZGF0YRgBIAEoBVIEZGF0YToEyLgeASKh",
            "CgoJRXZlbnRUZXN0EhgKB2V2ZW50SWQYASABKAlSB2V2ZW50SWQSEgoDZm9v",
            "GAIgASgJSABSA2ZvbxJRCghpbnRlcm5hbBgDIAEoCzIzLmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLkV2ZW50VGVzdC5OZXN0ZWRNZXNzYWdlSABSCGlu",
            "dGVybmFsEkMKCnRlc3RfZXZlbnQYBCABKA4yJC5jb20uenluZ2EucnVudGlt",
            "ZS5wcm90b2J1Zi5FbnVtVGVzdFIJdGVzdEV2ZW50EhsKCXRlc3RfcHJpbRgF",
            "IAMoBVIIdGVzdFByaW0SVgoMdGVzdF9tZXNzYWdlGAYgAygLMjMuY29tLnp5",
            "bmdhLnJ1bnRpbWUucHJvdG9idWYuRXZlbnRUZXN0Lk5lc3RlZE1lc3NhZ2VS",
            "C3Rlc3RNZXNzYWdlEkEKCXRlc3RfZW51bRgHIAMoDjIkLmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLkVudW1UZXN0Ugh0ZXN0RW51bRJNCgh0ZXN0X21h",
            "cBgIIAMoCzIyLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLkV2ZW50VGVz",
            "dC5UZXN0TWFwRW50cnlSB3Rlc3RNYXASSAoEZGF0YRgJIAEoCzI0LmNvbS56",
            "eW5nYS5ydW50aW1lLnByb3RvYnVmLkV2ZW50VGVzdC5FdmVudE9uZW9mVGVz",
            "dFIEZGF0YRJXCgx0ZXN0X21hcF90d28YCiADKAsyNS5jb20uenluZ2EucnVu",
            "dGltZS5wcm90b2J1Zi5FdmVudFRlc3QuVGVzdE1hcFR3b0VudHJ5Ugp0ZXN0",
            "TWFwVHdvElEKEHRlc3Rfbm9uX21lc3NhZ2UYCyABKAsyJy5jb20uenluZ2Eu",
            "cnVudGltZS5wcm90b2J1Zi5UZXN0TWVzc2FnZVIOdGVzdE5vbk1lc3NhZ2US",
            "OwoXdGVzdF9zdHJpbmdfbm9fY2hlY2tzdW0YDCABKAlCBNC4HgFSFHRlc3RT",
            "dHJpbmdOb0NoZWNrc3VtEigKEHRlc3RfYnl0ZXNfZmllbGQYDSABKAxSDnRl",
            "c3RCeXRlc0ZpZWxkEi4KBGRhdGUYDiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wUgRkYXRlGm8KDU5lc3RlZE1lc3NhZ2USEgoEZGF0YRgBIAEo",
            "BVIEZGF0YRJECgdkYXRhVHdvGAIgASgLMiouY29tLnp5bmdhLnJ1bnRpbWUu",
            "cHJvdG9idWYuVGVzdFR3b01lc3NhZ2VSB2RhdGFUd286BMi4HgEahQEKDkV2",
            "ZW50T25lb2ZUZXN0EhIKA2ZvbxgBIAEoCUgAUgNmb28SUQoIaW50ZXJuYWwY",
            "AiABKAsyMy5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5FdmVudFRlc3Qu",
            "TmVzdGVkTWVzc2FnZUgAUghpbnRlcm5hbDoEyLgeAUIGCgRib2R5Gm8KDFRl",
            "c3RNYXBFbnRyeRIQCgNrZXkYASABKAlSA2tleRJJCgV2YWx1ZRgCIAEoCzIz",
            "LmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLkV2ZW50VGVzdC5OZXN0ZWRN",
            "ZXNzYWdlUgV2YWx1ZToCOAEaPQoPVGVzdE1hcFR3b0VudHJ5EhAKA2tleRgB",
            "IAEoBVIDa2V5EhQKBXZhbHVlGAIgASgJUgV2YWx1ZToCOAE6BMi4HgFCCwoJ",
            "dGVzdE9uZW9mKiQKCEVudW1UZXN0EgkKBVZBTFVFEAASDQoJVkFMVUVfVFdP",
            "EAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Zynga.Runtime.Protobuf.EnumTest), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.TestMessage), global::Com.Zynga.Runtime.Protobuf.TestMessage.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.TestTwoMessage), global::Com.Zynga.Runtime.Protobuf.TestTwoMessage.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.EventTest), global::Com.Zynga.Runtime.Protobuf.EventTest.Parser, new[]{ "EventId", "Foo", "Internal", "TestEvent", "TestPrim", "TestMessage", "TestEnum", "TestMap", "Data", "TestMapTwo", "TestNonMessage", "TestStringNoChecksum", "TestBytesField", "Date" }, new[]{ "TestOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage), global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Parser, new[]{ "Data", "DataTwo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest), global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest.Parser, new[]{ "Foo", "Internal" }, new[]{ "Body" }, null, null),
            null, null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum EnumTest {
    [pbr::OriginalName("VALUE")] Value = 0,
    [pbr::OriginalName("VALUE_TWO")] ValueTwo = 1,
  }

  #endregion

  #region Messages
  public sealed partial class TestMessage : pb::IMessage<TestMessage> {
    private static readonly pb::MessageParser<TestMessage> _parser = new pb::MessageParser<TestMessage>(() => new TestMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.EventTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMessage(TestMessage other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestMessage Clone() {
      return new TestMessage(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private int data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void GetChecksum(BinaryWriter inWriter) {
      if (Data != 0) inWriter.Write(Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestMessage other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// must flag internal message as event_sourced
  /// </summary>
  public sealed partial class TestTwoMessage : zpr::EventRegistry, pb::IMessage<TestTwoMessage> {
    private static readonly pb::MessageParser<TestTwoMessage> _parser = new pb::MessageParser<TestTwoMessage>(() => new TestTwoMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestTwoMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.EventTestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestTwoMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestTwoMessage(TestTwoMessage other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestTwoMessage Clone() {
      return new TestTwoMessage(this);
    }

    public static bool IsEventSourced = true;

    public TestTwoMessage.Paths Path = new TestTwoMessage.Paths(zpr.EventPath.Empty);

    public void SetPath(TestTwoMessage.Paths path) {
      this.Path = path;
    }

    public class Paths {

        public zpr.EventPath Path = null;

        public Paths(zpr.EventPath _path) {
          Path = _path;
        }
        public zpr.EventPath DataPath => new zpr.EventPath(Path, 1);
    }
    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private int data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data {
      get { return data_; }
      set {
        AddEvent(1, zpr.EventSource.EventAction.Set, value);
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestTwoMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestTwoMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void GetChecksum(BinaryWriter inWriter) {
      if (Data != 0) inWriter.Write(Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestTwoMessage other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadInt32();
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        switch (e.Path[pathIndex]) {
          case 1: {
            data_ = e.Data.I32;
          }
          break;
          default: 
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventContent GetEventData<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
        switch (fieldNumber) {
          case 1: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.I32 };
          }
          break;
          default: 
            return null;
          break;
        }
    }

    public override void AddEvent<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
       var e = new zpr.EventSource.EventData {
         Field = fieldNumber,
         Action = action,
         Data = GetEventData(fieldNumber, action, data)
       };

       switch (fieldNumber) {
          case 1: {
            e.Path.AddRange(this.Path.DataPath._path);
          }
          break;
          default: 
            return;
          break;
        }
        _root.Add(e);
    }
    public override bool ApplySnapshot(zpr.EventSource.EventSourceRoot root) {
      var e = TestTwoMessage.Parser.ParseFrom(root.Events[0].Data.ByteData);
      MergeFrom(e);
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      var er = new zpr.EventSource.EventSourceRoot();
      var ee = new zpr.EventSource.EventData();
      ee.Action = zpr.EventSource.EventAction.Snapshot;
      ee.Data = new zpr.EventSource.EventContent();
      ee.Data.ByteData = this.ToByteString();
      er.Events.Add(ee);
      return er;
    }

  }

  public sealed partial class EventTest : zpr::EventRegistry, pb::IMessage<EventTest> {
    private static readonly pb::MessageParser<EventTest> _parser = new pb::MessageParser<EventTest>(() => new EventTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.EventTestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTest(EventTest other) : this() {
      eventId_ = other.eventId_;
      testEvent_ = other.testEvent_;
      testPrim_ = other.testPrim_.Clone();
      testMessage_ = other.testMessage_.Clone();
      testEnum_ = other.testEnum_.Clone();
      testMap_ = other.testMap_.Clone();
      data_ = other.data_ != null ? other.Data.Clone() : null;
      testMapTwo_ = other.testMapTwo_.Clone();
      testNonMessage_ = other.testNonMessage_ != null ? other.TestNonMessage.Clone() : null;
      testStringNoChecksum_ = other.testStringNoChecksum_;
      testBytesField_ = other.testBytesField_;
      date_ = other.date_ != null ? other.Date.Clone() : null;
      switch (other.TestOneofCase) {
        case TestOneofOneofCase.Foo:
          Foo = other.Foo;
          break;
        case TestOneofOneofCase.Internal:
          Internal = other.Internal.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTest Clone() {
      return new EventTest(this);
    }

    public static bool IsEventSourced = true;

    public EventTest.Paths Path = new EventTest.Paths(zpr.EventPath.Empty);

    public void SetPath(EventTest.Paths path) {
      this.Path = path;
    }

    public class Paths {

        public zpr.EventPath Path = null;

        public Paths(zpr.EventPath _path) {
          Path = _path;
        }
        public zpr.EventPath EventIdPath => new zpr.EventPath(Path, 1);
        public zpr.EventPath FooPath => new zpr.EventPath(Path, 2);
        public global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Paths InternalPath => new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Paths(new zpr.EventPath(Path, 3));
        public zpr.EventPath TestEventPath => new zpr.EventPath(Path, 4);
        public zpr.EventPath TestPrimPath => new zpr.EventPath(Path, 5);
        public zpr.EventPath TestMessagePath => new zpr.EventPath(Path, 6);
        public zpr.EventPath TestEnumPath => new zpr.EventPath(Path, 7);
        public zpr.EventPath TestMapPath => new zpr.EventPath(Path, 8);
        public global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest.Paths DataPath => new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest.Paths(new zpr.EventPath(Path, 9));
        public zpr.EventPath TestMapTwoPath => new zpr.EventPath(Path, 10);
        public zpr.EventPath TestNonMessagePath => new zpr.EventPath(Path, 11);
        public zpr.EventPath TestStringNoChecksumPath => new zpr.EventPath(Path, 12);
        public zpr.EventPath TestBytesFieldPath => new zpr.EventPath(Path, 13);
        public zpr.EventPath DatePath => new zpr.EventPath(Path, 14);
    }
    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    /// <summary>
    /// unique event identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        AddEvent(1, zpr.EventSource.EventAction.Set, pb::ProtoPreconditions.CheckNotNull(value, "value"));
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "foo" field.</summary>
    public const int FooFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Foo {
      get { return testOneofCase_ == TestOneofOneofCase.Foo ? (string) testOneof_ : ""; }
      set {
        AddEvent(2, zpr.EventSource.EventAction.Set, pb::ProtoPreconditions.CheckNotNull(value, "value"));
        testOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        testOneofCase_ = TestOneofOneofCase.Foo;
      }
    }

    /// <summary>Field number for the "internal" field.</summary>
    public const int InternalFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage Internal {
      get { return testOneofCase_ == TestOneofOneofCase.Internal ? (global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage) testOneof_ : null; }
      set {
        value.SetRoot(_root);
        value.SetPath(new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Paths(new zpr.EventPath(this.Path.Path, 3)));
        AddEvent(3, zpr.EventSource.EventAction.Snapshot, value);
        testOneof_ = value;
        testOneofCase_ = value == null ? TestOneofOneofCase.None : TestOneofOneofCase.Internal;
      }
    }

    /// <summary>Field number for the "test_event" field.</summary>
    public const int TestEventFieldNumber = 4;
    private global::Com.Zynga.Runtime.Protobuf.EnumTest testEvent_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.EnumTest TestEvent {
      get { return testEvent_; }
      set {
        AddEvent(4, zpr.EventSource.EventAction.Set, value);
        testEvent_ = value;
      }
    }

    /// <summary>Field number for the "test_prim" field.</summary>
    public const int TestPrimFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_testPrim_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> testPrim_ = new pbc::RepeatedField<int>();
    public void AddtestPrim(int value) {
     AddEvent(5, zpr.EventSource.EventAction.AddList, value);
     testPrim_.Add(value);
    }
    public void RemovetestPrim(int value) {
     AddEvent(5, zpr.EventSource.EventAction.RemoveList, value);
     testPrim_.Remove(value);
    }
    public void ClearTestPrim() {
     AddEvent(5, zpr.EventSource.EventAction.ClearList, -1);
     testPrim_.Clear();
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    #if !NET35
    public IReadOnlyList<int> TestPrim {
      get { return testPrim_; }
    }
    #endif

    /// <summary>Field number for the "test_message" field.</summary>
    public const int TestMessageFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage> _repeated_testMessage_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Parser);
    private readonly pbc::RepeatedField<global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage> testMessage_ = new pbc::RepeatedField<global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage>();
    public void AddTestMessage(global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage value) {
     AddEvent(6, zpr.EventSource.EventAction.AddList, value);
     testMessage_.Add(value);
    }
    public void RemoveTestMessage(global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage value) {
     AddEvent(6, zpr.EventSource.EventAction.RemoveList, testMessage_.IndexOf(value));
     testMessage_.Remove(value);
    }
    public void ClearTestMessage() {
     AddEvent(6, zpr.EventSource.EventAction.ClearList, -1);
     testMessage_.Clear();
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    #if !NET35
    public IReadOnlyList<global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage> TestMessage {
      get { return testMessage_; }
    }
    #endif

    /// <summary>Field number for the "test_enum" field.</summary>
    public const int TestEnumFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Zynga.Runtime.Protobuf.EnumTest> _repeated_testEnum_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Com.Zynga.Runtime.Protobuf.EnumTest) x);
    private readonly pbc::RepeatedField<global::Com.Zynga.Runtime.Protobuf.EnumTest> testEnum_ = new pbc::RepeatedField<global::Com.Zynga.Runtime.Protobuf.EnumTest>();
    public void AddTestEnum(global::Com.Zynga.Runtime.Protobuf.EnumTest value) {
     AddEvent(7, zpr.EventSource.EventAction.AddList, value);
     testEnum_.Add(value);
    }
    public void RemoveTestEnum(global::Com.Zynga.Runtime.Protobuf.EnumTest value) {
     AddEvent(7, zpr.EventSource.EventAction.RemoveList, value);
     testEnum_.Remove(value);
    }
    public void ClearTestEnum() {
     AddEvent(7, zpr.EventSource.EventAction.ClearList, -1);
     testEnum_.Clear();
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    #if !NET35
    public IReadOnlyList<global::Com.Zynga.Runtime.Protobuf.EnumTest> TestEnum {
      get { return testEnum_; }
    }
    #endif

    /// <summary>Field number for the "test_map" field.</summary>
    public const int TestMapFieldNumber = 8;
    private static readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage>.Codec _map_testMap_codec
        = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Parser), 66);
    private readonly pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage> testMap_ = new pbc::MapField<string, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage>();
    public void AddTestMap(string key, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage value) {
     var mapEvent = new zpr.EventSource.EventMap();
     using (var memStream = new MemoryStream()) {;
       var dataStream = new CodedOutputStream(memStream);
       dataStream.WriteString(key);
       dataStream.WriteMessage(value);
       dataStream.Flush();
       mapEvent.Data = ByteString.CopyFrom(memStream.ToArray());
     }
     AddEvent(8, zpr.EventSource.EventAction.AddMap, mapEvent);
     testMap_.Add(key, value);
    }
    public void RemoveTestMap(string key) {
     var mapEvent = new zpr.EventSource.EventMap();
     using (var memStream = new MemoryStream()) {;
       var dataStream = new CodedOutputStream(memStream);
       dataStream.WriteString(key);
       dataStream.Flush();
       mapEvent.Data = ByteString.CopyFrom(memStream.ToArray());
     }
     AddEvent(8, zpr.EventSource.EventAction.RemoveMap, mapEvent);
     testMap_.Remove(key);
    }
    public void ClearTestMap() {
     AddEvent(8, zpr.EventSource.EventAction.ClearMap, -1);
     testMap_.Clear();
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    #if !NET35
    public IReadOnlyDictionary<string, global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage> TestMap {
      get { return testMap_; }
    }
    #endif

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 9;
    private global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest Data {
      get { return data_; }
      set {
        value.SetRoot(_root);
        value.SetPath(new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest.Paths(new zpr.EventPath(this.Path.Path, 9)));
        AddEvent(9, zpr.EventSource.EventAction.Snapshot, value);
        data_ = value;
      }
    }

    /// <summary>Field number for the "test_map_two" field.</summary>
    public const int TestMapTwoFieldNumber = 10;
    private static readonly pbc::MapField<int, string>.Codec _map_testMapTwo_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<int, string> testMapTwo_ = new pbc::MapField<int, string>();
    public void AddTestMapTwo(int key, string value) {
     var mapEvent = new zpr.EventSource.EventMap();
     using (var memStream = new MemoryStream()) {;
       var dataStream = new CodedOutputStream(memStream);
       dataStream.WriteInt32(key);
       dataStream.WriteString(value);
       dataStream.Flush();
       mapEvent.Data = ByteString.CopyFrom(memStream.ToArray());
     }
     AddEvent(10, zpr.EventSource.EventAction.AddMap, mapEvent);
     testMapTwo_.Add(key, value);
    }
    public void RemoveTestMapTwo(int key) {
     var mapEvent = new zpr.EventSource.EventMap();
     using (var memStream = new MemoryStream()) {;
       var dataStream = new CodedOutputStream(memStream);
       dataStream.WriteInt32(key);
       dataStream.Flush();
       mapEvent.Data = ByteString.CopyFrom(memStream.ToArray());
     }
     AddEvent(10, zpr.EventSource.EventAction.RemoveMap, mapEvent);
     testMapTwo_.Remove(key);
    }
    public void ClearTestMapTwo() {
     AddEvent(10, zpr.EventSource.EventAction.ClearMap, -1);
     testMapTwo_.Clear();
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    #if !NET35
    public IReadOnlyDictionary<int, string> TestMapTwo {
      get { return testMapTwo_; }
    }
    #endif

    /// <summary>Field number for the "test_non_message" field.</summary>
    public const int TestNonMessageFieldNumber = 11;
    private global::Com.Zynga.Runtime.Protobuf.TestMessage testNonMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Zynga.Runtime.Protobuf.TestMessage TestNonMessage {
      get { return testNonMessage_; }
      set {
        AddEvent(11, zpr.EventSource.EventAction.Snapshot, value);
        testNonMessage_ = value;
      }
    }

    /// <summary>Field number for the "test_string_no_checksum" field.</summary>
    public const int TestStringNoChecksumFieldNumber = 12;
    private string testStringNoChecksum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestStringNoChecksum {
      get { return testStringNoChecksum_; }
      set {
        AddEvent(12, zpr.EventSource.EventAction.Set, pb::ProtoPreconditions.CheckNotNull(value, "value"));
        testStringNoChecksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_bytes_field" field.</summary>
    public const int TestBytesFieldFieldNumber = 13;
    private pb::ByteString testBytesField_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TestBytesField {
      get { return testBytesField_; }
      set {
        AddEvent(13, zpr.EventSource.EventAction.Set, pb::ProtoPreconditions.CheckNotNull(value, "value"));
        testBytesField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        AddEvent(14, zpr.EventSource.EventAction.Snapshot, value);
        date_ = value;
      }
    }

    public object testOneof_;
    /// <summary>Enum of possible cases for the "testOneof" oneof.</summary>
    public enum TestOneofOneofCase {
      None = 0,
      Foo = 2,
      Internal = 3,
    }
    public TestOneofOneofCase testOneofCase_ = TestOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOneofOneofCase TestOneofCase {
      get { return testOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestOneof() {
      testOneofCase_ = TestOneofOneofCase.None;
      testOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (Foo != other.Foo) return false;
      if (!object.Equals(Internal, other.Internal)) return false;
      if (TestEvent != other.TestEvent) return false;
      if(!testPrim_.Equals(other.testPrim_)) return false;
      if(!testMessage_.Equals(other.testMessage_)) return false;
      if(!testEnum_.Equals(other.testEnum_)) return false;
      if (testMap_.Equals(other.testMap_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (testMapTwo_.Equals(other.testMapTwo_)) return false;
      if (!object.Equals(TestNonMessage, other.TestNonMessage)) return false;
      if (TestStringNoChecksum != other.TestStringNoChecksum) return false;
      if (TestBytesField != other.TestBytesField) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (TestOneofCase != other.TestOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (testOneofCase_ == TestOneofOneofCase.Foo) hash ^= Foo.GetHashCode();
      if (testOneofCase_ == TestOneofOneofCase.Internal) hash ^= Internal.GetHashCode();
      if (TestEvent != 0) hash ^= TestEvent.GetHashCode();
      hash ^= testPrim_.GetHashCode();
      hash ^= testMessage_.GetHashCode();
      hash ^= testEnum_.GetHashCode();
      hash ^= testMap_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= testMapTwo_.GetHashCode();
      if (testNonMessage_ != null) hash ^= TestNonMessage.GetHashCode();
      if (TestStringNoChecksum.Length != 0) hash ^= TestStringNoChecksum.GetHashCode();
      if (TestBytesField.Length != 0) hash ^= TestBytesField.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      hash ^= (int) testOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void GetChecksum(BinaryWriter inWriter) {
      if (EventId.Length != 0) inWriter.Write(EventId);
      if (testOneofCase_ == TestOneofOneofCase.Foo) inWriter.Write(Foo);
      if (testOneofCase_ == TestOneofOneofCase.Internal) Internal.GetChecksum(inWriter);
      if (TestEvent != 0) inWriter.Write((int)testEvent_);
      foreach (var item in testPrim_) {
          inWriter.Write(item);
      }
      foreach (var item in testMessage_) {
          item.GetChecksum(inWriter);
      }
      foreach (var item in testEnum_) {
          inWriter.Write((int)item);
      }
      foreach (var item in testMap_) {
          inWriter.Write(item.Key);
          item.Value.GetChecksum(inWriter);
      }
      if (data_ != null) Data.GetChecksum(inWriter);
      foreach (var item in testMapTwo_) {
          inWriter.Write(item.Key);
          inWriter.Write(item.Value);
      }
      if (testNonMessage_ != null) TestNonMessage.GetChecksum(inWriter);
      if (TestBytesField.Length != 0) inWriter.Write(testBytesField_.ToByteArray());
      if (date_ != null) Date.GetChecksum(inWriter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (testOneofCase_ == TestOneofOneofCase.Foo) {
        output.WriteRawTag(18);
        output.WriteString(Foo);
      }
      if (testOneofCase_ == TestOneofOneofCase.Internal) {
        output.WriteRawTag(26);
        output.WriteMessage(Internal);
      }
      if (TestEvent != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TestEvent);
      }
      testPrim_.WriteTo(output, _repeated_testPrim_codec);
      testMessage_.WriteTo(output, _repeated_testMessage_codec);
      testEnum_.WriteTo(output, _repeated_testEnum_codec);
      testMap_.WriteTo(output, _map_testMap_codec);
      if (data_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Data);
      }
      testMapTwo_.WriteTo(output, _map_testMapTwo_codec);
      if (testNonMessage_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TestNonMessage);
      }
      if (TestStringNoChecksum.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TestStringNoChecksum);
      }
      if (TestBytesField.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(TestBytesField);
      }
      if (date_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Date);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (testOneofCase_ == TestOneofOneofCase.Foo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Foo);
      }
      if (testOneofCase_ == TestOneofOneofCase.Internal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Internal);
      }
      if (TestEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TestEvent);
      }
      size += testPrim_.CalculateSize(_repeated_testPrim_codec);
      size += testMessage_.CalculateSize(_repeated_testMessage_codec);
      size += testEnum_.CalculateSize(_repeated_testEnum_codec);
      size += testMap_.CalculateSize(_map_testMap_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += testMapTwo_.CalculateSize(_map_testMapTwo_codec);
      if (testNonMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestNonMessage);
      }
      if (TestStringNoChecksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestStringNoChecksum);
      }
      if (TestBytesField.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TestBytesField);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTest other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.TestEvent != 0) {
        TestEvent = other.TestEvent;
      }
      testPrim_.Add(other.testPrim_);
      testMessage_.Add(other.testMessage_);
      testEnum_.Add(other.testEnum_);
      testMap_.Add(other.testMap_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest();
        }
        Data.MergeFrom(other.Data);
      }
      testMapTwo_.Add(other.testMapTwo_);
      if (other.testNonMessage_ != null) {
        if (testNonMessage_ == null) {
          testNonMessage_ = new global::Com.Zynga.Runtime.Protobuf.TestMessage();
        }
        TestNonMessage.MergeFrom(other.TestNonMessage);
      }
      if (other.TestStringNoChecksum.Length != 0) {
        TestStringNoChecksum = other.TestStringNoChecksum;
      }
      if (other.TestBytesField.Length != 0) {
        TestBytesField = other.TestBytesField;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          date_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      switch (other.TestOneofCase) {
        case TestOneofOneofCase.Foo:
          Foo = other.Foo;
          break;
        case TestOneofOneofCase.Internal:
          Internal = other.Internal;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            Foo = input.ReadString();
            break;
          }
          case 26: {
            global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage subBuilder = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage();
            if (testOneofCase_ == TestOneofOneofCase.Internal) {
              subBuilder.MergeFrom(Internal);
            }
            input.ReadMessage(subBuilder);
            Internal = subBuilder;
            break;
          }
          case 32: {
            testEvent_ = (global::Com.Zynga.Runtime.Protobuf.EnumTest) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            testPrim_.AddEntriesFrom(input, _repeated_testPrim_codec);
            break;
          }
          case 50: {
            testMessage_.AddEntriesFrom(input, _repeated_testMessage_codec);
            break;
          }
          case 58:
          case 56: {
            testEnum_.AddEntriesFrom(input, _repeated_testEnum_codec);
            break;
          }
          case 66: {
            testMap_.AddEntriesFrom(input, _map_testMap_codec);
            break;
          }
          case 74: {
            if (data_ == null) {
              data_ = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest();
            }
            input.ReadMessage(data_);
            break;
          }
          case 82: {
            testMapTwo_.AddEntriesFrom(input, _map_testMapTwo_codec);
            break;
          }
          case 90: {
            if (testNonMessage_ == null) {
              testNonMessage_ = new global::Com.Zynga.Runtime.Protobuf.TestMessage();
            }
            input.ReadMessage(testNonMessage_);
            break;
          }
          case 98: {
            TestStringNoChecksum = input.ReadString();
            break;
          }
          case 106: {
            TestBytesField = input.ReadBytes();
            break;
          }
          case 114: {
            if (date_ == null) {
              date_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(date_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EventTest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// must flag internal message as event_sourced
      /// </summary>
      public sealed partial class NestedMessage : zpr::EventRegistry, pb::IMessage<NestedMessage> {
        private static readonly pb::MessageParser<NestedMessage> _parser = new pb::MessageParser<NestedMessage>(() => new NestedMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Zynga.Runtime.Protobuf.EventTest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage(NestedMessage other) : this() {
          data_ = other.data_;
          dataTwo_ = other.dataTwo_ != null ? other.DataTwo.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage Clone() {
          return new NestedMessage(this);
        }

        public static bool IsEventSourced = true;

        public NestedMessage.Paths Path = new NestedMessage.Paths(zpr.EventPath.Empty);

        public void SetPath(NestedMessage.Paths path) {
          this.Path = path;
        }

        public class Paths {

            public zpr.EventPath Path = null;

            public Paths(zpr.EventPath _path) {
              Path = _path;
            }
            public zpr.EventPath DataPath => new zpr.EventPath(Path, 1);
            public global::Com.Zynga.Runtime.Protobuf.TestTwoMessage.Paths DataTwoPath => new global::Com.Zynga.Runtime.Protobuf.TestTwoMessage.Paths(new zpr.EventPath(Path, 2));
        }
        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private int data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Data {
          get { return data_; }
          set {
            AddEvent(1, zpr.EventSource.EventAction.Set, value);
            data_ = value;
          }
        }

        /// <summary>Field number for the "dataTwo" field.</summary>
        public const int DataTwoFieldNumber = 2;
        private global::Com.Zynga.Runtime.Protobuf.TestTwoMessage dataTwo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Zynga.Runtime.Protobuf.TestTwoMessage DataTwo {
          get { return dataTwo_; }
          set {
            value.SetRoot(_root);
            value.SetPath(new global::Com.Zynga.Runtime.Protobuf.TestTwoMessage.Paths(new zpr.EventPath(this.Path.Path, 2)));
            AddEvent(2, zpr.EventSource.EventAction.Snapshot, value);
            dataTwo_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Data != other.Data) return false;
          if (!object.Equals(DataTwo, other.DataTwo)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Data != 0) hash ^= Data.GetHashCode();
          if (dataTwo_ != null) hash ^= DataTwo.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void GetChecksum(BinaryWriter inWriter) {
          if (Data != 0) inWriter.Write(Data);
          if (dataTwo_ != null) DataTwo.GetChecksum(inWriter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Data != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Data);
          }
          if (dataTwo_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(DataTwo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Data != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
          }
          if (dataTwo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTwo);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedMessage other) {
          if (other == null) {
            return;
          }
          if (other.Data != 0) {
            Data = other.Data;
          }
          if (other.dataTwo_ != null) {
            if (dataTwo_ == null) {
              dataTwo_ = new global::Com.Zynga.Runtime.Protobuf.TestTwoMessage();
            }
            DataTwo.MergeFrom(other.DataTwo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Data = input.ReadInt32();
                break;
              }
              case 18: {
                if (dataTwo_ == null) {
                  dataTwo_ = new global::Com.Zynga.Runtime.Protobuf.TestTwoMessage();
                }
                input.ReadMessage(dataTwo_);
                break;
              }
            }
          }
        }

        public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
            switch (e.Path[pathIndex]) {
              case 1: {
                data_ = e.Data.I32;
              }
              break;
              case 2: {
                if (dataTwo_ == null) dataTwo_ = new global::Com.Zynga.Runtime.Protobuf.TestTwoMessage();
                if (e.Path.Count - 1 != pathIndex) 
                  (dataTwo_ as zpr::EventRegistry)?.ApplyEvent(e, pathIndex + 1);
                else
                  dataTwo_  = global::Com.Zynga.Runtime.Protobuf.TestTwoMessage.Parser.ParseFrom(e.Data.ByteData);
              }
              break;
              default: 
                return false;
              break;
            }
          return true;
        }

        public override zpr.EventSource.EventContent GetEventData<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
            switch (fieldNumber) {
              case 1: {
                return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.I32 };
              }
              break;
              case 2: {
                var byteDatadataTwo = (data as pb::IMessage)?.ToByteString();
                return new zpr.EventSource.EventContent() { ByteData = byteDatadataTwo };
              }
              break;
              default: 
                return null;
              break;
            }
        }

        public override void AddEvent<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
           var e = new zpr.EventSource.EventData {
             Field = fieldNumber,
             Action = action,
             Data = GetEventData(fieldNumber, action, data)
           };

           switch (fieldNumber) {
              case 1: {
                e.Path.AddRange(this.Path.DataPath._path);
              }
              break;
              case 2: {
                e.Path.AddRange(this.Path.DataTwoPath.Path._path);
              }
              break;
              default: 
                return;
              break;
            }
            _root.Add(e);
        }
        public override bool ApplySnapshot(zpr.EventSource.EventSourceRoot root) {
          var e = NestedMessage.Parser.ParseFrom(root.Events[0].Data.ByteData);
          MergeFrom(e);
          return true;
        }

        public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
          var er = new zpr.EventSource.EventSourceRoot();
          var ee = new zpr.EventSource.EventData();
          ee.Action = zpr.EventSource.EventAction.Snapshot;
          ee.Data = new zpr.EventSource.EventContent();
          ee.Data.ByteData = this.ToByteString();
          er.Events.Add(ee);
          return er;
        }

      }

      public sealed partial class EventOneofTest : zpr::EventRegistry, pb::IMessage<EventOneofTest> {
        private static readonly pb::MessageParser<EventOneofTest> _parser = new pb::MessageParser<EventOneofTest>(() => new EventOneofTest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventOneofTest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Com.Zynga.Runtime.Protobuf.EventTest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventOneofTest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventOneofTest(EventOneofTest other) : this() {
          switch (other.BodyCase) {
            case BodyOneofCase.Foo:
              Foo = other.Foo;
              break;
            case BodyOneofCase.Internal:
              Internal = other.Internal.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventOneofTest Clone() {
          return new EventOneofTest(this);
        }

        public static bool IsEventSourced = true;

        public EventOneofTest.Paths Path = new EventOneofTest.Paths(zpr.EventPath.Empty);

        public void SetPath(EventOneofTest.Paths path) {
          this.Path = path;
        }

        public class Paths {

            public zpr.EventPath Path = null;

            public Paths(zpr.EventPath _path) {
              Path = _path;
            }
            public zpr.EventPath FooPath => new zpr.EventPath(Path, 1);
            public global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Paths InternalPath => new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Paths(new zpr.EventPath(Path, 2));
        }
        /// <summary>Field number for the "foo" field.</summary>
        public const int FooFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Foo {
          get { return bodyCase_ == BodyOneofCase.Foo ? (string) body_ : ""; }
          set {
            AddEvent(1, zpr.EventSource.EventAction.Set, pb::ProtoPreconditions.CheckNotNull(value, "value"));
            body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            bodyCase_ = BodyOneofCase.Foo;
          }
        }

        /// <summary>Field number for the "internal" field.</summary>
        public const int InternalFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage Internal {
          get { return bodyCase_ == BodyOneofCase.Internal ? (global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage) body_ : null; }
          set {
            value.SetRoot(_root);
            value.SetPath(new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Paths(new zpr.EventPath(this.Path.Path, 2)));
            AddEvent(2, zpr.EventSource.EventAction.Snapshot, value);
            body_ = value;
            bodyCase_ = value == null ? BodyOneofCase.None : BodyOneofCase.Internal;
          }
        }

        public object body_;
        /// <summary>Enum of possible cases for the "body" oneof.</summary>
        public enum BodyOneofCase {
          None = 0,
          Foo = 1,
          Internal = 2,
        }
        public BodyOneofCase bodyCase_ = BodyOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyOneofCase BodyCase {
          get { return bodyCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBody() {
          bodyCase_ = BodyOneofCase.None;
          body_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventOneofTest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventOneofTest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Foo != other.Foo) return false;
          if (!object.Equals(Internal, other.Internal)) return false;
          if (BodyCase != other.BodyCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (bodyCase_ == BodyOneofCase.Foo) hash ^= Foo.GetHashCode();
          if (bodyCase_ == BodyOneofCase.Internal) hash ^= Internal.GetHashCode();
          hash ^= (int) bodyCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void GetChecksum(BinaryWriter inWriter) {
          if (bodyCase_ == BodyOneofCase.Foo) inWriter.Write(Foo);
          if (bodyCase_ == BodyOneofCase.Internal) Internal.GetChecksum(inWriter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (bodyCase_ == BodyOneofCase.Foo) {
            output.WriteRawTag(10);
            output.WriteString(Foo);
          }
          if (bodyCase_ == BodyOneofCase.Internal) {
            output.WriteRawTag(18);
            output.WriteMessage(Internal);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (bodyCase_ == BodyOneofCase.Foo) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Foo);
          }
          if (bodyCase_ == BodyOneofCase.Internal) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Internal);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventOneofTest other) {
          if (other == null) {
            return;
          }
          switch (other.BodyCase) {
            case BodyOneofCase.Foo:
              Foo = other.Foo;
              break;
            case BodyOneofCase.Internal:
              Internal = other.Internal;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Foo = input.ReadString();
                break;
              }
              case 18: {
                global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage subBuilder = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage();
                if (bodyCase_ == BodyOneofCase.Internal) {
                  subBuilder.MergeFrom(Internal);
                }
                input.ReadMessage(subBuilder);
                Internal = subBuilder;
                break;
              }
            }
          }
        }

        public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
            switch (e.Path[pathIndex]) {
              case 1: {
                body_ = pb::ProtoPreconditions.CheckNotNull(e.Data.StringData, "value");
                bodyCase_ = BodyOneofCase.Foo;
              }
              break;
              case 2: {
                if (body_ == null) body_ = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage();
                if (e.Path.Count - 1 != pathIndex) 
                  (body_  as zpr::EventRegistry)?.ApplyEvent(e, pathIndex + 1);
                else
                  body_   = global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Parser.ParseFrom(e.Data.ByteData);
                bodyCase_ = body_ == null ? BodyOneofCase.None : BodyOneofCase.Internal;
              }
              break;
              default: 
                return false;
              break;
            }
          return true;
        }

        public override zpr.EventSource.EventContent GetEventData<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
            switch (fieldNumber) {
              case 1: {
                return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.StringData };
              }
              break;
              case 2: {
                var byteDatainternal = (data as pb::IMessage)?.ToByteString();
                return new zpr.EventSource.EventContent() { ByteData = byteDatainternal };
              }
              break;
              default: 
                return null;
              break;
            }
        }

        public override void AddEvent<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
           var e = new zpr.EventSource.EventData {
             Field = fieldNumber,
             Action = action,
             Data = GetEventData(fieldNumber, action, data)
           };

           switch (fieldNumber) {
              case 1: {
                e.Path.AddRange(this.Path.FooPath._path);
              }
              break;
              case 2: {
                e.Path.AddRange(this.Path.InternalPath.Path._path);
              }
              break;
              default: 
                return;
              break;
            }
            _root.Add(e);
        }
        public override bool ApplySnapshot(zpr.EventSource.EventSourceRoot root) {
          var e = EventOneofTest.Parser.ParseFrom(root.Events[0].Data.ByteData);
          MergeFrom(e);
          return true;
        }

        public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
          var er = new zpr.EventSource.EventSourceRoot();
          var ee = new zpr.EventSource.EventData();
          ee.Action = zpr.EventSource.EventAction.Snapshot;
          ee.Data = new zpr.EventSource.EventContent();
          ee.Data.ByteData = this.ToByteString();
          er.Events.Add(ee);
          return er;
        }

      }

    }
    #endregion

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        switch (e.Path[pathIndex]) {
          case 1: {
            eventId_ = e.Data.StringData;
          }
          break;
          case 2: {
            testOneof_ = pb::ProtoPreconditions.CheckNotNull(e.Data.StringData, "value");
            testOneofCase_ = TestOneofOneofCase.Foo;
          }
          break;
          case 3: {
            if (testOneof_ == null) testOneof_ = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage();
            if (e.Path.Count - 1 != pathIndex) 
              (testOneof_  as zpr::EventRegistry)?.ApplyEvent(e, pathIndex + 1);
            else
              testOneof_   = global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Parser.ParseFrom(e.Data.ByteData);
            testOneofCase_ = testOneof_ == null ? TestOneofOneofCase.None : TestOneofOneofCase.Internal;
          }
          break;
          case 4: {
            testEvent_ = (global::Com.Zynga.Runtime.Protobuf.EnumTest)e.Data.U32;
          }
          break;
          case 5: {
            if (e.Action == zpr.EventSource.EventAction.AddList) {
              testPrim_.Add(e.Data.I32);
            } else if (e.Action == zpr.EventSource.EventAction.RemoveList) {
              testPrim_.Remove(e.Data.I32);
            } else if (e.Action == zpr.EventSource.EventAction.ClearList) {
              testPrim_.Clear();
            }
          }
          break;
          case 6: {
            if (e.Action == zpr.EventSource.EventAction.AddList) {
              var m = global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage.Parser.ParseFrom(e.Data.ByteData);
              testMessage_.Add(m);
            } else if (e.Action == zpr.EventSource.EventAction.RemoveList) {
              SafeRemoveCurrentIndex(testMessage_, e.Data.I32);
            } else if (e.Action == zpr.EventSource.EventAction.ClearList) {
              testMessage_.Clear();
            }
          }
          break;
          case 7: {
            if (e.Action == zpr.EventSource.EventAction.AddList) {
              testEnum_.Add((global::Com.Zynga.Runtime.Protobuf.EnumTest)e.Data.U32);
            } else if (e.Action == zpr.EventSource.EventAction.RemoveList) {
              testEnum_.Remove((global::Com.Zynga.Runtime.Protobuf.EnumTest)e.Data.U32);
            } else if (e.Action == zpr.EventSource.EventAction.ClearList) {
              testEnum_.Clear();
            }
          }
          break;
          case 8: {
            var dataStream = e.Data.MapData.Data.CreateCodedInput();
            if (e.Action == zpr.EventSource.EventAction.AddMap) {
             var realKeytestMap = dataStream.ReadString();
             var realValuetestMap = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.NestedMessage();
             dataStream.ReadMessage(realValuetestMap);;
             testMap_.Add(realKeytestMap, realValuetestMap);
            } else if (e.Action == zpr.EventSource.EventAction.RemoveMap) {
             var realKeytestMap = dataStream.ReadString();
             testMap_.Remove(realKeytestMap);
            } else if (e.Action == zpr.EventSource.EventAction.ClearMap) {
             testMap_.Clear();
            }
          }
          break;
          case 9: {
            if (data_ == null) data_ = new global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest();
            if (e.Path.Count - 1 != pathIndex) 
              (data_ as zpr::EventRegistry)?.ApplyEvent(e, pathIndex + 1);
            else
              data_  = global::Com.Zynga.Runtime.Protobuf.EventTest.Types.EventOneofTest.Parser.ParseFrom(e.Data.ByteData);
          }
          break;
          case 10: {
            var dataStream = e.Data.MapData.Data.CreateCodedInput();
            if (e.Action == zpr.EventSource.EventAction.AddMap) {
             var realKeytestMapTwo = dataStream.ReadInt32();
             var realValuetestMapTwo  = dataStream.ReadString();
             testMapTwo_.Add(realKeytestMapTwo, realValuetestMapTwo);
            } else if (e.Action == zpr.EventSource.EventAction.RemoveMap) {
             var realKeytestMapTwo = dataStream.ReadInt32();
             testMapTwo_.Remove(realKeytestMapTwo);
            } else if (e.Action == zpr.EventSource.EventAction.ClearMap) {
             testMapTwo_.Clear();
            }
          }
          break;
          case 11: {
            if (testNonMessage_ == null) testNonMessage_ = new global::Com.Zynga.Runtime.Protobuf.TestMessage();
            testNonMessage_  = global::Com.Zynga.Runtime.Protobuf.TestMessage.Parser.ParseFrom(e.Data.ByteData);
          }
          break;
          case 12: {
            testStringNoChecksum_ = e.Data.StringData;
          }
          break;
          case 13: {
            testBytesField_ = e.Data.ByteData;
          }
          break;
          case 14: {
            if (date_ == null) date_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            date_  = global::Google.Protobuf.WellKnownTypes.Timestamp.Parser.ParseFrom(e.Data.ByteData);
          }
          break;
          default: 
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventContent GetEventData<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
        switch (fieldNumber) {
          case 1: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.StringData };
          }
          break;
          case 2: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.StringData };
          }
          break;
          case 3: {
            var byteDatainternal = (data as pb::IMessage)?.ToByteString();
            return new zpr.EventSource.EventContent() { ByteData = byteDatainternal };
          }
          break;
          case 4: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.U32 };
          }
          break;
          case 5: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.I32 };
          }
          break;
          case 6: {
            var byteData = (data as pb::IMessage)?.ToByteString();
            return new zpr.EventSource.EventContent() { ByteData = byteData };
          }
          break;
          case 7: {
            return new zpr.EventSource.EventContent() { data_ = Convert.ToUInt32(data), dataCase_ = zpr.EventSource.EventContent.DataOneofCase.U32 };
          }
          break;
          case 8: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.MapData };
          }
          break;
          case 9: {
            var byteDatadata = (data as pb::IMessage)?.ToByteString();
            return new zpr.EventSource.EventContent() { ByteData = byteDatadata };
          }
          break;
          case 10: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.MapData };
          }
          break;
          case 11: {
            var byteDatatestNonMessage = (data as pb::IMessage)?.ToByteString();
            return new zpr.EventSource.EventContent() { ByteData = byteDatatestNonMessage };
          }
          break;
          case 12: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.StringData };
          }
          break;
          case 13: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.ByteData };
          }
          break;
          case 14: {
            var byteDatadate = (data as pb::IMessage)?.ToByteString();
            return new zpr.EventSource.EventContent() { ByteData = byteDatadate };
          }
          break;
          default: 
            return null;
          break;
        }
    }

    public override void AddEvent<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
       var e = new zpr.EventSource.EventData {
         Field = fieldNumber,
         Action = action,
         Data = GetEventData(fieldNumber, action, data)
       };

       switch (fieldNumber) {
          case 1: {
            e.Path.AddRange(this.Path.EventIdPath._path);
          }
          break;
          case 2: {
            e.Path.AddRange(this.Path.FooPath._path);
          }
          break;
          case 3: {
            e.Path.AddRange(this.Path.InternalPath.Path._path);
          }
          break;
          case 4: {
            e.Path.AddRange(this.Path.TestEventPath._path);
          }
          break;
          case 5: {
            e.Path.AddRange(this.Path.TestPrimPath._path);
          }
          break;
          case 6: {
            e.Path.AddRange(this.Path.TestMessagePath._path);
          }
          break;
          case 7: {
            e.Path.AddRange(this.Path.TestEnumPath._path);
          }
          break;
          case 8: {
            e.Path.AddRange(this.Path.TestMapPath._path);
          }
          break;
          case 9: {
            e.Path.AddRange(this.Path.DataPath.Path._path);
          }
          break;
          case 10: {
            e.Path.AddRange(this.Path.TestMapTwoPath._path);
          }
          break;
          case 11: {
            e.Path.AddRange(this.Path.TestNonMessagePath._path);
          }
          break;
          case 12: {
            e.Path.AddRange(this.Path.TestStringNoChecksumPath._path);
          }
          break;
          case 13: {
            e.Path.AddRange(this.Path.TestBytesFieldPath._path);
          }
          break;
          case 14: {
            e.Path.AddRange(this.Path.DatePath._path);
          }
          break;
          default: 
            return;
          break;
        }
        _root.Add(e);
    }
    public override bool ApplySnapshot(zpr.EventSource.EventSourceRoot root) {
      var e = EventTest.Parser.ParseFrom(root.Events[0].Data.ByteData);
      MergeFrom(e);
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      var er = new zpr.EventSource.EventSourceRoot();
      var ee = new zpr.EventSource.EventData();
      ee.Action = zpr.EventSource.EventAction.Snapshot;
      ee.Data = new zpr.EventSource.EventContent();
      ee.Data.ByteData = this.ToByteString();
      er.Events.Add(ee);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
