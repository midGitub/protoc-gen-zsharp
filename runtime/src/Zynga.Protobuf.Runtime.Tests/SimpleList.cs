// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/simple_list.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Com.Zynga.Runtime.Protobuf {

  /// <summary>Holder for reflection information generated from test/simple_list.proto</summary>
  public static partial class SimpleListReflection {

    #region Descriptor
    /// <summary>File descriptor for test/simple_list.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimpleListReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZ0ZXN0L3NpbXBsZV9saXN0LnByb3RvEhpjb20uenluZ2EucnVudGltZS5w",
            "cm90b2J1ZhoSZXZlbnRfcGx1Z2luLnByb3RvIi0KClNpbXBsZUxpc3QSGQoI",
            "dGVzdF9iYXIYCyADKAlSB3Rlc3RCYXI6BMi4HgFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zynga.Protobuf.EventSource.EventPluginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Zynga.Runtime.Protobuf.SimpleList), global::Com.Zynga.Runtime.Protobuf.SimpleList.Parser, new[]{ "TestBar" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SimpleList : zpr::EventRegistry, pb::IMessage<SimpleList> {
    private static readonly pb::MessageParser<SimpleList> _parser = new pb::MessageParser<SimpleList>(() => new SimpleList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Zynga.Runtime.Protobuf.SimpleListReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleList() {
      OnConstruction();
      testBar_.SetRoot(_root);
      testBar_.SetPath(Path.TestBarPath);
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleList(SimpleList other) : this() {
      testBar_ = new EventRepeatedField<string>(testBarDataConverter, other.TestBar.Clone());
      testBar_.SetRoot(_root);
      testBar_.SetPath(Path.TestBarPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleList Clone() {
      return new SimpleList(this);
    }

    public static bool IsEventSourced = true;

    public SimpleList.Paths Path = new SimpleList.Paths(zpr.EventPath.Empty);

    public override void SetRoot(List<zpr.EventSource.EventData> inRoot) {
      base.SetRoot(inRoot);
      testBar_.SetRoot(inRoot);
    }
    public void SetPath(SimpleList.Paths path) {
      this.Path = path;
      testBar_.SetPath(Path.TestBarPath);
    }

    public class Paths {

        public zpr.EventPath Path = null;

        public Paths(zpr.EventPath _path) {
          Path = _path;
        }
        public zpr.EventPath TestBarPath => new zpr.EventPath(Path, 11);
    }
    /// <summary>Field number for the "test_bar" field.</summary>
    public const int TestBarFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_testBar_codec
        = pb::FieldCodec.ForString(90);
    public class TestBarDataConverter: EventDataConverter<string> {
      public override zpr.EventSource.EventContent GetEventData(string data) {
        return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.StringData };
      }
      public override string GetItem(zpr.EventSource.EventContent data) {
        return data.StringData;
      }
    }
    private static TestBarDataConverter testBarDataConverter = new TestBarDataConverter();
    private readonly EventRepeatedField<string> testBar_ = new EventRepeatedField<string>(testBarDataConverter);
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRepeatedField<string> TestBar {
      get { return testBar_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!testBar_.Equals(other.testBar_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= testBar_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      testBar_.WriteTo(output, _repeated_testBar_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += testBar_.CalculateSize(_repeated_testBar_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleList other) {
      if (other == null) {
        return;
      }
      testBar_.Add(other.testBar_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 90: {
            testBar_.AddEntriesFrom(input, _repeated_testBar_codec);
            break;
          }
        }
      }
    }

    public override bool ApplyEvent(zpr.EventSource.EventData e, int pathIndex) {
        switch (e.Path[pathIndex]) {
          case 11: {
            testBar_.ApplyEvent(e);
          }
          break;
          default: 
            return false;
          break;
        }
      return true;
    }

    public override zpr.EventSource.EventContent GetEventData<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
        switch (fieldNumber) {
          case 11: {
            return new zpr.EventSource.EventContent() { data_ = data, dataCase_ = zpr.EventSource.EventContent.DataOneofCase.StringData };
          }
          break;
          default: 
            return null;
          break;
        }
    }

    public override void AddEvent<T>(int fieldNumber, zpr.EventSource.EventAction action, T data) {
       var e = new zpr.EventSource.EventData {
         Field = fieldNumber,
         Action = action,
         Data = GetEventData(fieldNumber, action, data)
       };

       switch (fieldNumber) {
          case 11: {
            e.Path.AddRange(this.Path.TestBarPath._path);
          }
          break;
          default: 
            return;
          break;
        }
        _root.Add(e);
    }
    public override bool ApplySnapshot(zpr.EventSource.EventSourceRoot root) {
      var e = SimpleList.Parser.ParseFrom(root.Events[0].Data.ByteData);
      MergeFrom(e);
      return true;
    }

    public override zpr.EventSource.EventSourceRoot GenerateSnapshot() {
      var er = new zpr.EventSource.EventSourceRoot();
      var ee = new zpr.EventSource.EventData();
      ee.Action = zpr.EventSource.EventAction.Snapshot;
      ee.Data = new zpr.EventSource.EventContent();
      ee.Data.ByteData = this.ToByteString();
      er.Events.Add(ee);
      return er;
    }

  }

  #endregion

}

#endregion Designer generated code
